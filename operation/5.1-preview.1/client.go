// Package operation implements the Azure ARM Operation service API version 5.1-preview.
//
//
package operation

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"github.com/satori/go.uuid"
	"net/http"
)

const (
	// DefaultBaseURI is the default URI used for the service Operation
	DefaultBaseURI = "https://dev.azure.com"
)

// BaseClient is the base client for Operation.
type BaseClient struct {
	autorest.Client
	BaseURI string
}

//// START - ADDED MANUALLY
type OperationClient struct {
	BaseClient
}

// NewOperationClient creates an instance of the DatabaseAccountsClient client.
func NewOperationClient() OperationClient {
	return NewOperationClientWithBaseURI(DefaultBaseURI)
}

// NewOperationClientWithBaseURI creates an instance of the DatabaseAccountsClient client.
func NewOperationClientWithBaseURI(baseURI string) OperationClient {
	return OperationClient{NewWithBaseURI(baseURI)}
}

//// END ADDED

// New creates an instance of the BaseClient client.
func New() BaseClient {
	return NewWithBaseURI(DefaultBaseURI)
}

// NewWithBaseURI creates an instance of the BaseClient client.
func NewWithBaseURI(baseURI string) BaseClient {
	return BaseClient{
		Client:  autorest.NewClientWithUserAgent(UserAgent()),
		BaseURI: baseURI,
	}
}

// GetOperation gets an operation from the the operationId using the given pluginId.
//
// Some scenarios donâ€™t require a pluginId. If a pluginId is not included in the call then just the operationId will
// be used to find an operation.
// Parameters:
// operationId - the ID for the operation.
// organization - the name of the Azure DevOps organization.
// pluginID - the ID for the plugin.
func (client BaseClient) GetOperation(ctx context.Context, operationId uuid.UUID, organization string, pluginID *uuid.UUID) (result Model, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetOperation")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetOperationPreparer(ctx, operationId, organization, pluginID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "operation.BaseClient", "GetOperation", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetOperationSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "operation.BaseClient", "GetOperation", resp, "Failure sending request")
		return
	}

	result, err = client.GetOperationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "operation.BaseClient", "GetOperation", resp, "Failure responding to request")
	}

	return
}

// GetOperationPreparer prepares the GetOperation request.
func (client BaseClient) GetOperationPreparer(ctx context.Context, operationId uuid.UUID, organization string, pluginID *uuid.UUID) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"operationId":  autorest.Encode("path", operationId),
		"organization": autorest.Encode("path", organization),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if pluginID != nil {
		queryParameters["pluginId"] = autorest.Encode("query", *pluginID)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/operations/{operationId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetOperationSender sends the GetOperation request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetOperationSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetOperationResponder handles the response to the GetOperation request. The method always
// closes the http.Response Body.
func (client BaseClient) GetOperationResponder(resp *http.Response) (result Model, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
