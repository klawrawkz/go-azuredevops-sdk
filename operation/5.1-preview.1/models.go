package operation

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"
	"github.com/Azure/go-autorest/autorest"
	"github.com/satori/go.uuid"
)

// The package's fully qualified name.
const fqdn = "operation-go"

// Model contains information about the progress or result of an async operation.
type Model struct {
	autorest.Response `json:"-"`
	// Links - Links to other related objects.
	Links *ReferenceLinks `json:"_links,omitempty"`
	// DetailedMessage - Detailed messaged about the status of an operation.
	DetailedMessage *string `json:"detailedMessage,omitempty"`
	// ResultMessage - Result message for an operation.
	ResultMessage *string `json:"resultMessage,omitempty"`
	// ResultURL - URL to the operation result.
	ResultURL *ResultReference `json:"resultUrl,omitempty"`
	// ID - Unique identifier for the operation.
	ID *uuid.UUID `json:"id,omitempty"`
	// PluginID - Unique identifier for the plugin.
	PluginID *uuid.UUID `json:"pluginId,omitempty"`
	// Status - The current status of the operation.
	Status interface{} `json:"status,omitempty"`
	// URL - URL to get the full operation object.
	URL *string `json:"url,omitempty"`
}

// Reference reference for an async operation.
type Reference struct {
	// ID - Unique identifier for the operation.
	ID *uuid.UUID `json:"id,omitempty"`
	// PluginID - Unique identifier for the plugin.
	PluginID *uuid.UUID `json:"pluginId,omitempty"`
	// Status - The current status of the operation.
	Status interface{} `json:"status,omitempty"`
	// URL - URL to get the full operation object.
	URL *string `json:"url,omitempty"`
}

// ReferenceLinks the class to represent a collection of REST reference links.
type ReferenceLinks struct {
	// Links - The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.
	Links map[string]interface{} `json:"links"`
}

// MarshalJSON is the custom marshaler for ReferenceLinks.
func (rl ReferenceLinks) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if rl.Links != nil {
		objectMap["links"] = rl.Links
	}
	return json.Marshal(objectMap)
}

// ResultReference ...
type ResultReference struct {
	// ResultURL - URL to the operation result.
	ResultURL *string `json:"resultUrl,omitempty"`
}
