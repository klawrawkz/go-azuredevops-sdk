package core

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/satori/go.uuid"
)

// The package's fully qualified name.
const fqdn = "core-go"

// ProjectState enumerates the values for project state.
type ProjectState string

const (
	// ProjectStateAll All projects regardless of state.
	ProjectStateAll ProjectState = "all"
	// ProjectStateCreatePending Project has been queued for creation, but the process has not yet started.
	ProjectStateCreatePending ProjectState = "createPending"
	// ProjectStateDeleted Project has been deleted.
	ProjectStateDeleted ProjectState = "deleted"
	// ProjectStateDeleting Project is in the process of being deleted.
	ProjectStateDeleting ProjectState = "deleting"
	// ProjectStateNew Project is in the process of being created.
	ProjectStateNew ProjectState = "new"
	// ProjectStateUnchanged Project has not been changed.
	ProjectStateUnchanged ProjectState = "unchanged"
	// ProjectStateWellFormed Project is completely created and ready to use.
	ProjectStateWellFormed ProjectState = "wellFormed"
)

// PossibleProjectStateValues returns an array of possible values for the ProjectState const type.
func PossibleProjectStateValues() []ProjectState {
	return []ProjectState{ProjectStateAll, ProjectStateCreatePending, ProjectStateDeleted, ProjectStateDeleting, ProjectStateNew, ProjectStateUnchanged, ProjectStateWellFormed}
}

// GraphSubjectBase ...
type GraphSubjectBase struct {
	// Links - This field contains zero or more interesting links about the graph subject. These links may be invoked to obtain additional relationships or more detailed information about this graph subject.
	Links *ReferenceLinks `json:"_links,omitempty"`
	// Descriptor - The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
	Descriptor *string `json:"descriptor,omitempty"`
	// DisplayName - This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
	DisplayName *string `json:"displayName,omitempty"`
	// URL - This url is the full route to the source resource of this graph subject.
	URL *string `json:"url,omitempty"`
}

// IdentityData ...
type IdentityData struct {
	IdentityIds *[]uuid.UUID `json:"identityIds,omitempty"`
}

// IdentityDescriptor an Identity descriptor is a wrapper for the identity type (Windows SID, Passport)
// along with a unique identifier such as the SID or PUID.
type IdentityDescriptor struct {
	// Identifier - The unique identifier for this identity, not exceeding 256 chars, which will be persisted.
	Identifier *string `json:"identifier,omitempty"`
	// IdentityType - Type of descriptor (for example, Windows, Passport, etc.).
	IdentityType *string `json:"identityType,omitempty"`
}

// IdentityRef ...
type IdentityRef struct {
	// DirectoryAlias - Deprecated - Can be retrieved by querying the Graph user referenced in the "self" entry of the IdentityRef "_links" dictionary
	DirectoryAlias *string `json:"directoryAlias,omitempty"`
	ID             *string `json:"id,omitempty"`
	// ImageURL - Deprecated - Available in the "avatar" entry of the IdentityRef "_links" dictionary
	ImageURL *string `json:"imageUrl,omitempty"`
	// Inactive - Deprecated - Can be retrieved by querying the Graph membership state referenced in the "membershipState" entry of the GraphUser "_links" dictionary
	Inactive *bool `json:"inactive,omitempty"`
	// IsAadIdentity - Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)
	IsAadIdentity *bool `json:"isAadIdentity,omitempty"`
	// IsContainer - Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)
	IsContainer       *bool `json:"isContainer,omitempty"`
	IsDeletedInOrigin *bool `json:"isDeletedInOrigin,omitempty"`
	// ProfileURL - Deprecated - not in use in most preexisting implementations of ToIdentityRef
	ProfileURL *string `json:"profileUrl,omitempty"`
	// UniqueName - Deprecated - use Domain+PrincipalName instead
	UniqueName *string `json:"uniqueName,omitempty"`
	// Links - This field contains zero or more interesting links about the graph subject. These links may be invoked to obtain additional relationships or more detailed information about this graph subject.
	Links *ReferenceLinks `json:"_links,omitempty"`
	// Descriptor - The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
	Descriptor *string `json:"descriptor,omitempty"`
	// DisplayName - This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
	DisplayName *string `json:"displayName,omitempty"`
	// URL - This url is the full route to the source resource of this graph subject.
	URL *string `json:"url,omitempty"`
}

// JSONPatchOperation the JSON model for a JSON Patch operation
type JSONPatchOperation struct {
	// From - The path to copy from for the Move/Copy operation.
	From *string `json:"from,omitempty"`
	// Op - The patch operation
	Op interface{} `json:"op,omitempty"`
	// Path - The path for the operation
	Path *string `json:"path,omitempty"`
	// Value - The value for the operation. This is either a primitive or a JToken.
	Value interface{} `json:"value,omitempty"`
}

// ListProcess ...
type ListProcess struct {
	autorest.Response `json:"-"`
	// Count			  int `json:"count,omitempty"`
	Value *[]Process `json:"value,omitempty"`
}

// ListProjectProperty ...
type ListProjectProperty struct {
	autorest.Response `json:"-"`
	Value             *[]ProjectProperty `json:"value,omitempty"`
}

// ListTeamMember ...
type ListTeamMember struct {
	autorest.Response `json:"-"`
	Value             *[]TeamMember `json:"value,omitempty"`
}

// ListTeamProjectReference ...
type ListTeamProjectReference struct {
	autorest.Response `json:"-"`
	Value             *[]TeamProjectReference `json:"value,omitempty"`
}

// ListWebAPITeam ...
type ListWebAPITeam struct {
	autorest.Response `json:"-"`
	Value             *[]WebAPITeam `json:"value,omitempty"`
}

// OperationReference reference for an async operation.
type OperationReference struct {
	autorest.Response `json:"-"`
	// ID - Unique identifier for the operation.
	ID *uuid.UUID `json:"id,omitempty"`
	// PluginID - Unique identifier for the plugin.
	PluginID *uuid.UUID `json:"pluginId,omitempty"`
	// Status - The current status of the operation.
	Status interface{} `json:"status,omitempty"`
	// URL - URL to get the full operation object.
	URL *string `json:"url,omitempty"`
}

// Process ...
type Process struct {
	autorest.Response `json:"-"`
	Links             *ReferenceLinks `json:"_links,omitempty"`
	Description       *string         `json:"description,omitempty"`
	ID                *uuid.UUID      `json:"id,omitempty"`
	IsDefault         *bool           `json:"isDefault,omitempty"`
	Type              interface{}     `json:"type,omitempty"`
	Name              *string         `json:"name,omitempty"`
	URL               *string         `json:"url,omitempty"`
}

// ProcessReference ...
type ProcessReference struct {
	Name *string `json:"name,omitempty"`
	URL  *string `json:"url,omitempty"`
}

// ProjectAvatar ...
type ProjectAvatar struct {
	// Image - The avatar image represented as a byte array
	Image *[][]byte `json:"image,omitempty"`
}

// ProjectInfo contains information describing a project.
type ProjectInfo struct {
	// Abbreviation - The abbreviated name of the project.
	Abbreviation *string `json:"abbreviation,omitempty"`
	// Description - The description of the project.
	Description *string `json:"description,omitempty"`
	// ID - The id of the project.
	ID *uuid.UUID `json:"id,omitempty"`
	// LastUpdateTime - The time that this project was last updated.
	LastUpdateTime *date.Time `json:"lastUpdateTime,omitempty"`
	// Name - The name of the project.
	Name *string `json:"name,omitempty"`
	// Properties - A set of name-value pairs storing additional property data related to the project.
	Properties *[]ProjectProperty `json:"properties,omitempty"`
	// Revision - The current revision of the project.
	Revision *int64 `json:"revision,omitempty"`
	// State - The current state of the project.
	State interface{} `json:"state,omitempty"`
	// URI - A Uri that can be used to refer to this project.
	URI *string `json:"uri,omitempty"`
	// Version - The version number of the project.
	Version *int64 `json:"version,omitempty"`
	// Visibility - Indicates whom the project is visible to.
	Visibility interface{} `json:"visibility,omitempty"`
}

// ProjectMessage ...
type ProjectMessage struct {
	Project                     *ProjectInfo `json:"project,omitempty"`
	ProjectChangeType           interface{}  `json:"projectChangeType,omitempty"`
	ShouldInvalidateSystemStore *bool        `json:"shouldInvalidateSystemStore,omitempty"`
}

// ProjectProperty a named value associated with a project.
type ProjectProperty struct {
	// Name - The name of the property.
	Name *string `json:"name,omitempty"`
	// Value - The value of the property.
	Value interface{} `json:"value,omitempty"`
}

// Proxy ...
type Proxy struct {
	Authorization *ProxyAuthorization `json:"authorization,omitempty"`
	// Description - This is a description string
	Description *string `json:"description,omitempty"`
	// FriendlyName - The friendly name of the server
	FriendlyName  *string `json:"friendlyName,omitempty"`
	GlobalDefault *bool   `json:"globalDefault,omitempty"`
	// Site - This is a string representation of the site that the proxy server is located in (e.g. "NA-WA-RED")
	Site        *string `json:"site,omitempty"`
	SiteDefault *bool   `json:"siteDefault,omitempty"`
	// URL - The URL of the proxy server
	URL *string `json:"url,omitempty"`
}

// ProxyAuthorization ...
type ProxyAuthorization struct {
	// AuthorizationURL - Gets or sets the endpoint used to obtain access tokens from the configured token service.
	AuthorizationURL *string `json:"authorizationUrl,omitempty"`
	// ClientID - Gets or sets the client identifier for this proxy.
	ClientID *uuid.UUID `json:"clientId,omitempty"`
	// Identity - Gets or sets the user identity to authorize for on-prem.
	Identity *IdentityDescriptor `json:"identity,omitempty"`
	// PublicKey - Gets or sets the public key used to verify the identity of this proxy. Only specify on hosted.
	PublicKey *PublicKey `json:"publicKey,omitempty"`
}

// PublicKey represents the public key portion of an RSA asymmetric key.
type PublicKey struct {
	// Exponent - Gets or sets the exponent for the public key.
	Exponent *[][]byte `json:"exponent,omitempty"`
	// Modulus - Gets or sets the modulus for the public key.
	Modulus *[][]byte `json:"modulus,omitempty"`
}

// ReferenceLinks the class to represent a collection of REST reference links.
type ReferenceLinks struct {
	// Links - The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.
	Links map[string]interface{} `json:"links"`
}

// MarshalJSON is the custom marshaler for ReferenceLinks.
func (rl ReferenceLinks) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if rl.Links != nil {
		objectMap["links"] = rl.Links
	}
	return json.Marshal(objectMap)
}

// TeamContext the Team Context for an operation.
type TeamContext struct {
	// Project - The team project Id or name.  Ignored if ProjectId is set.
	Project *string `json:"project,omitempty"`
	// ProjectID - The Team Project ID.  Required if Project is not set.
	ProjectID *uuid.UUID `json:"projectId,omitempty"`
	// Team - The Team Id or name.  Ignored if TeamId is set.
	Team *string `json:"team,omitempty"`
	// TeamID - The Team Id
	TeamID *uuid.UUID `json:"teamId,omitempty"`
}

// TeamMember ...
type TeamMember struct {
	Identity    *IdentityRef `json:"identity,omitempty"`
	IsTeamAdmin *bool        `json:"isTeamAdmin,omitempty"`
}

// TeamProject represents a Team Project object.
type TeamProject struct {
	autorest.Response `json:"-"`
	// Links - The links to other objects related to this object.
	Links *ReferenceLinks `json:"_links,omitempty"`
	// Capabilities - Set of capabilities this project has (such as process template & version control).
	Capabilities map[string]map[string]*string `json:"capabilities"`
	// DefaultTeam - The shallow ref to the default team.
	DefaultTeam *WebAPITeamRef `json:"defaultTeam,omitempty"`
	// Abbreviation - Project abbreviation.
	Abbreviation *string `json:"abbreviation,omitempty"`
	// DefaultTeamImageURL - Url to default team identity image.
	DefaultTeamImageURL *string `json:"defaultTeamImageUrl,omitempty"`
	// Description - The project's description (if any).
	Description *string `json:"description,omitempty"`
	// ID - Project identifier.
	ID *uuid.UUID `json:"id,omitempty"`
	// LastUpdateTime - Project last update time.
	LastUpdateTime *date.Time `json:"lastUpdateTime,omitempty"`
	// Name - Project name.
	Name *string `json:"name,omitempty"`
	// Revision - Project revision.
	Revision *int64 `json:"revision,omitempty"`
	// State - Project state.
	State interface{} `json:"state,omitempty"`
	// URL - Url to the full version of the object.
	URL *string `json:"url,omitempty"`
	// Visibility - Project visibility.
	Visibility interface{} `json:"visibility,omitempty"`
}

// MarshalJSON is the custom marshaler for TeamProject.
func (tp TeamProject) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if tp.Links != nil {
		objectMap["_links"] = tp.Links
	}
	if tp.Capabilities != nil {
		objectMap["capabilities"] = tp.Capabilities
	}
	if tp.DefaultTeam != nil {
		objectMap["defaultTeam"] = tp.DefaultTeam
	}
	if tp.Abbreviation != nil {
		objectMap["abbreviation"] = tp.Abbreviation
	}
	if tp.DefaultTeamImageURL != nil {
		objectMap["defaultTeamImageUrl"] = tp.DefaultTeamImageURL
	}
	if tp.Description != nil {
		objectMap["description"] = tp.Description
	}
	if tp.ID != nil {
		objectMap["id"] = tp.ID
	}
	if tp.LastUpdateTime != nil {
		objectMap["lastUpdateTime"] = tp.LastUpdateTime
	}
	if tp.Name != nil {
		objectMap["name"] = tp.Name
	}
	if tp.Revision != nil {
		objectMap["revision"] = tp.Revision
	}
	if tp.State != nil {
		objectMap["state"] = tp.State
	}
	if tp.URL != nil {
		objectMap["url"] = tp.URL
	}
	if tp.Visibility != nil {
		objectMap["visibility"] = tp.Visibility
	}
	return json.Marshal(objectMap)
}

// TeamProjectCollection data contract for a TeamProjectCollection.
type TeamProjectCollection struct {
	// Links - The links to other objects related to this object.
	Links *ReferenceLinks `json:"_links,omitempty"`
	// Description - Project collection description.
	Description *string `json:"description,omitempty"`
	// ProcessCustomizationType - Process customzation type on this collection. It can be Xml or Inherited.
	ProcessCustomizationType interface{} `json:"processCustomizationType,omitempty"`
	// State - Project collection state.
	State *string `json:"state,omitempty"`
	// ID - Collection Id.
	ID *uuid.UUID `json:"id,omitempty"`
	// Name - Collection Name.
	Name *string `json:"name,omitempty"`
	// URL - Collection REST Url.
	URL *string `json:"url,omitempty"`
}

// TeamProjectCollectionReference reference object for a TeamProjectCollection.
type TeamProjectCollectionReference struct {
	// ID - Collection Id.
	ID *uuid.UUID `json:"id,omitempty"`
	// Name - Collection Name.
	Name *string `json:"name,omitempty"`
	// URL - Collection REST Url.
	URL *string `json:"url,omitempty"`
}

// TeamProjectReference represents a shallow reference to a TeamProject.
type TeamProjectReference struct {
	// Abbreviation - Project abbreviation.
	Abbreviation *string `json:"abbreviation,omitempty"`
	// DefaultTeamImageURL - Url to default team identity image.
	DefaultTeamImageURL *string `json:"defaultTeamImageUrl,omitempty"`
	// Description - The project's description (if any).
	Description *string `json:"description,omitempty"`
	// ID - Project identifier.
	ID *uuid.UUID `json:"id,omitempty"`
	// LastUpdateTime - Project last update time.
	LastUpdateTime *date.Time `json:"lastUpdateTime,omitempty"`
	// Name - Project name.
	Name *string `json:"name,omitempty"`
	// Revision - Project revision.
	Revision *int64 `json:"revision,omitempty"`
	// State - Project state.
	State interface{} `json:"state,omitempty"`
	// URL - Url to the full version of the object.
	URL *string `json:"url,omitempty"`
	// Visibility - Project visibility.
	Visibility interface{} `json:"visibility,omitempty"`
}

// TemporaryDataCreatedDTO a data transfer object that stores the metadata associated with the creation of
// temporary data.
type TemporaryDataCreatedDTO struct {
	ExpirationDate    *date.Time  `json:"expirationDate,omitempty"`
	ID                *uuid.UUID  `json:"id,omitempty"`
	URL               *string     `json:"url,omitempty"`
	ExpirationSeconds *int32      `json:"expirationSeconds,omitempty"`
	Origin            *string     `json:"origin,omitempty"`
	Value             interface{} `json:"value,omitempty"`
}

// TemporaryDataDTO a data transfer object that stores the metadata associated with the temporary data.
type TemporaryDataDTO struct {
	ExpirationSeconds *int32      `json:"expirationSeconds,omitempty"`
	Origin            *string     `json:"origin,omitempty"`
	Value             interface{} `json:"value,omitempty"`
}

// VssJSONCollectionWrapper this class is used to serialized collections as a single JSON object on the
// wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
type VssJSONCollectionWrapper struct {
	Value *string `json:"value,omitempty"`
	Count *int32  `json:"count,omitempty"`
}

// VssJSONCollectionWrapperBase ...
type VssJSONCollectionWrapperBase struct {
	Count *int32 `json:"count,omitempty"`
}

// WebAPIConnectedService ...
type WebAPIConnectedService struct {
	// AuthenticatedBy - The user who did the OAuth authentication to created this service
	AuthenticatedBy *IdentityRef `json:"authenticatedBy,omitempty"`
	// Description - Extra description on the service.
	Description *string `json:"description,omitempty"`
	// FriendlyName - Friendly Name of service connection
	FriendlyName *string `json:"friendlyName,omitempty"`
	// Kind - The kind of service.
	Kind *string `json:"kind,omitempty"`
	// Project - The project associated with this service
	Project *TeamProjectReference `json:"project,omitempty"`
	// ServiceURI - Optional uri to connect directly to the service such as https://windows.azure.com
	ServiceURI *string `json:"serviceUri,omitempty"`
	ID         *string `json:"id,omitempty"`
	URL        *string `json:"url,omitempty"`
}

// WebAPIConnectedServiceDetails ...
type WebAPIConnectedServiceDetails struct {
	// ConnectedServiceMetaData - Meta data for service connection
	ConnectedServiceMetaData *WebAPIConnectedService `json:"connectedServiceMetaData,omitempty"`
	// CredentialsXML - Credential info
	CredentialsXML *string `json:"credentialsXml,omitempty"`
	// EndPoint - Optional uri to connect directly to the service such as https://windows.azure.com
	EndPoint *string `json:"endPoint,omitempty"`
	ID       *string `json:"id,omitempty"`
	URL      *string `json:"url,omitempty"`
}

// WebAPIConnectedServiceRef ...
type WebAPIConnectedServiceRef struct {
	ID  *string `json:"id,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebAPICreateTagRequestData the representation of data needed to create a tag definition which is sent
// across the wire.
type WebAPICreateTagRequestData struct {
	// Name - Name of the tag definition that will be created.
	Name *string `json:"name,omitempty"`
}

// WebAPIProject ...
type WebAPIProject struct {
	// Capabilities - Set of capabilities this project has
	Capabilities map[string]map[string]*string `json:"capabilities"`
	// Collection - Reference to collection which contains this project
	Collection *WebAPIProjectCollectionRef `json:"collection,omitempty"`
	// DefaultTeam - Default team for this project
	DefaultTeam *WebAPITeamRef `json:"defaultTeam,omitempty"`
	// Abbreviation - Project abbreviation.
	Abbreviation *string `json:"abbreviation,omitempty"`
	// DefaultTeamImageURL - Url to default team identity image.
	DefaultTeamImageURL *string `json:"defaultTeamImageUrl,omitempty"`
	// Description - The project's description (if any).
	Description *string `json:"description,omitempty"`
	// ID - Project identifier.
	ID *uuid.UUID `json:"id,omitempty"`
	// LastUpdateTime - Project last update time.
	LastUpdateTime *date.Time `json:"lastUpdateTime,omitempty"`
	// Name - Project name.
	Name *string `json:"name,omitempty"`
	// Revision - Project revision.
	Revision *int64 `json:"revision,omitempty"`
	// State - Project state.
	State interface{} `json:"state,omitempty"`
	// URL - Url to the full version of the object.
	URL *string `json:"url,omitempty"`
	// Visibility - Project visibility.
	Visibility interface{} `json:"visibility,omitempty"`
}

// MarshalJSON is the custom marshaler for WebAPIProject.
func (wap WebAPIProject) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if wap.Capabilities != nil {
		objectMap["capabilities"] = wap.Capabilities
	}
	if wap.Collection != nil {
		objectMap["collection"] = wap.Collection
	}
	if wap.DefaultTeam != nil {
		objectMap["defaultTeam"] = wap.DefaultTeam
	}
	if wap.Abbreviation != nil {
		objectMap["abbreviation"] = wap.Abbreviation
	}
	if wap.DefaultTeamImageURL != nil {
		objectMap["defaultTeamImageUrl"] = wap.DefaultTeamImageURL
	}
	if wap.Description != nil {
		objectMap["description"] = wap.Description
	}
	if wap.ID != nil {
		objectMap["id"] = wap.ID
	}
	if wap.LastUpdateTime != nil {
		objectMap["lastUpdateTime"] = wap.LastUpdateTime
	}
	if wap.Name != nil {
		objectMap["name"] = wap.Name
	}
	if wap.Revision != nil {
		objectMap["revision"] = wap.Revision
	}
	if wap.State != nil {
		objectMap["state"] = wap.State
	}
	if wap.URL != nil {
		objectMap["url"] = wap.URL
	}
	if wap.Visibility != nil {
		objectMap["visibility"] = wap.Visibility
	}
	return json.Marshal(objectMap)
}

// WebAPIProjectCollection ...
type WebAPIProjectCollection struct {
	// Description - Project collection description
	Description *string `json:"description,omitempty"`
	// State - Project collection state
	State *string `json:"state,omitempty"`
	// CollectionURL - Collection Tfs Url (Host Url)
	CollectionURL *string `json:"collectionUrl,omitempty"`
	// ID - Collection Guid
	ID *uuid.UUID `json:"id,omitempty"`
	// Name - Collection Name
	Name *string `json:"name,omitempty"`
	// URL - Collection REST Url
	URL *string `json:"url,omitempty"`
}

// WebAPIProjectCollectionRef ...
type WebAPIProjectCollectionRef struct {
	// CollectionURL - Collection Tfs Url (Host Url)
	CollectionURL *string `json:"collectionUrl,omitempty"`
	// ID - Collection Guid
	ID *uuid.UUID `json:"id,omitempty"`
	// Name - Collection Name
	Name *string `json:"name,omitempty"`
	// URL - Collection REST Url
	URL *string `json:"url,omitempty"`
}

// WebAPITagDefinition the representation of a tag definition which is sent across the wire.
type WebAPITagDefinition struct {
	// Active - Whether or not the tag definition is active.
	Active *bool `json:"active,omitempty"`
	// ID - ID of the tag definition.
	ID *uuid.UUID `json:"id,omitempty"`
	// Name - The name of the tag definition.
	Name *string `json:"name,omitempty"`
	// URL - Resource URL for the Tag Definition.
	URL *string `json:"url,omitempty"`
}

// WebAPITeam ...
type WebAPITeam struct {
	autorest.Response `json:"-"`
	// Description - Team description
	Description *string `json:"description,omitempty"`
	// IdentityURL - Identity REST API Url to this team
	IdentityURL *string    `json:"identityUrl,omitempty"`
	ProjectID   *uuid.UUID `json:"projectId,omitempty"`
	ProjectName *string    `json:"projectName,omitempty"`
	// ID - Team (Identity) Guid. A Team Foundation ID.
	ID *uuid.UUID `json:"id,omitempty"`
	// Name - Team name
	Name *string `json:"name,omitempty"`
	// URL - Team REST API Url
	URL *string `json:"url,omitempty"`
}

// WebAPITeamRef ...
type WebAPITeamRef struct {
	// ID - Team (Identity) Guid. A Team Foundation ID.
	ID *uuid.UUID `json:"id,omitempty"`
	// Name - Team name
	Name *string `json:"name,omitempty"`
	// URL - Team REST API Url
	URL *string `json:"url,omitempty"`
}
