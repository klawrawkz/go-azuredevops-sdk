// Package core implements the Azure ARM Core service API version 5.1-preview.
//
//
package core

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"github.com/satori/go.uuid"
	"net/http"
)

const (
	// DefaultBaseURI is the default URI used for the service Core
	DefaultBaseURI = "https://dev.azure.com"
)

//// TO ADD
type CoreClient struct {
	BaseClient
}

// NewDatabaseAccountsClient creates an instance of the DatabaseAccountsClient client.
func NewCoreClient() CoreClient {
	return NewCoreClientWithBaseURI(DefaultBaseURI)
}

// NewDatabaseAccountsClientWithBaseURI creates an instance of the DatabaseAccountsClient client.
func NewCoreClientWithBaseURI(baseURI string) CoreClient {
	return CoreClient{NewWithBaseURI(baseURI)}
}

////

// BaseClient is the base client for Core.
type BaseClient struct {
	autorest.Client
	BaseURI string
}

// New creates an instance of the BaseClient client.
func New() BaseClient {
	return NewWithBaseURI(DefaultBaseURI)
}

// NewWithBaseURI creates an instance of the BaseClient client.
func NewWithBaseURI(baseURI string) BaseClient {
	return BaseClient{
		Client:  autorest.NewClientWithUserAgent(UserAgent()),
		BaseURI: baseURI,
	}
}

// CreateTeam create a team in a team project.
//
// Possible failure scenarios
// Invalid project name/ID (project doesn't exist) 404
// Invalid team name or description 400
// Team already exists 400
// Insufficient privileges 400
// Parameters:
// organization - the name of the Azure DevOps organization.
// body - the team data used to create the team.
// projectID - the name or ID (GUID) of the team project in which to create the team.
func (client BaseClient) CreateTeam(ctx context.Context, organization string, body WebAPITeam, projectID string) (result WebAPITeam, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.CreateTeam")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CreateTeamPreparer(ctx, organization, body, projectID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "CreateTeam", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateTeamSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "core.BaseClient", "CreateTeam", resp, "Failure sending request")
		return
	}

	result, err = client.CreateTeamResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "CreateTeam", resp, "Failure responding to request")
	}

	return
}

// CreateTeamPreparer prepares the CreateTeam request.
func (client BaseClient) CreateTeamPreparer(ctx context.Context, organization string, body WebAPITeam, projectID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"organization": autorest.Encode("path", organization),
		"projectId":    autorest.Encode("path", projectID),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/projects/{projectId}/teams", pathParameters),
		autorest.WithJSON(body),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateTeamSender sends the CreateTeam request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CreateTeamSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateTeamResponder handles the response to the CreateTeam request. The method always
// closes the http.Response Body.
func (client BaseClient) CreateTeamResponder(resp *http.Response) (result WebAPITeam, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteTeam delete a team.
// Parameters:
// organization - the name of the Azure DevOps organization.
// projectID - the name or ID (GUID) of the team project containing the team to delete.
// teamID - the name of ID of the team to delete.
func (client BaseClient) DeleteTeam(ctx context.Context, organization string, projectID string, teamID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.DeleteTeam")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeleteTeamPreparer(ctx, organization, projectID, teamID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "DeleteTeam", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteTeamSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "core.BaseClient", "DeleteTeam", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteTeamResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "DeleteTeam", resp, "Failure responding to request")
	}

	return
}

// DeleteTeamPreparer prepares the DeleteTeam request.
func (client BaseClient) DeleteTeamPreparer(ctx context.Context, organization string, projectID string, teamID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"organization": autorest.Encode("path", organization),
		"projectId":    autorest.Encode("path", projectID),
		"teamId":       autorest.Encode("path", teamID),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/projects/{projectId}/teams/{teamId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteTeamSender sends the DeleteTeam request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) DeleteTeamSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteTeamResponder handles the response to the DeleteTeam request. The method always
// closes the http.Response Body.
func (client BaseClient) DeleteTeamResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetAllTeams get a list of all teams.
// Parameters:
// organization - the name of the Azure DevOps organization.
// mine - if true return all the teams requesting user is member, otherwise return all the teams user has read
// access
// top - maximum number of teams to return.
// skip - number of teams to skip.
func (client BaseClient) GetAllTeams(ctx context.Context, organization string, mine *bool, top *int32, skip *int32) (result ListWebAPITeam, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetAllTeams")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetAllTeamsPreparer(ctx, organization, mine, top, skip)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetAllTeams", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAllTeamsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetAllTeams", resp, "Failure sending request")
		return
	}

	result, err = client.GetAllTeamsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetAllTeams", resp, "Failure responding to request")
	}

	return
}

// GetAllTeamsPreparer prepares the GetAllTeams request.
func (client BaseClient) GetAllTeamsPreparer(ctx context.Context, organization string, mine *bool, top *int32, skip *int32) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"organization": autorest.Encode("path", organization),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if mine != nil {
		queryParameters["$mine"] = autorest.Encode("query", *mine)
	}
	if top != nil {
		queryParameters["$top"] = autorest.Encode("query", *top)
	}
	if skip != nil {
		queryParameters["$skip"] = autorest.Encode("query", *skip)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/teams", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAllTeamsSender sends the GetAllTeams request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetAllTeamsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetAllTeamsResponder handles the response to the GetAllTeams request. The method always
// closes the http.Response Body.
func (client BaseClient) GetAllTeamsResponder(resp *http.Response) (result ListWebAPITeam, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetProcessByID get a process by ID.
// Parameters:
// organization - the name of the Azure DevOps organization.
// processID - ID for a process.
func (client BaseClient) GetProcessByID(ctx context.Context, organization string, processID uuid.UUID) (result Process, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetProcessByID")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetProcessByIDPreparer(ctx, organization, processID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetProcessByID", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetProcessByIDSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetProcessByID", resp, "Failure sending request")
		return
	}

	result, err = client.GetProcessByIDResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetProcessByID", resp, "Failure responding to request")
	}

	return
}

// GetProcessByIDPreparer prepares the GetProcessByID request.
func (client BaseClient) GetProcessByIDPreparer(ctx context.Context, organization string, processID uuid.UUID) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"organization": autorest.Encode("path", organization),
		"processId":    autorest.Encode("path", processID),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/process/processes/{processId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetProcessByIDSender sends the GetProcessByID request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetProcessByIDSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetProcessByIDResponder handles the response to the GetProcessByID request. The method always
// closes the http.Response Body.
func (client BaseClient) GetProcessByIDResponder(resp *http.Response) (result Process, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetProcesses get a list of processes.
// Parameters:
// organization - the name of the Azure DevOps organization.
func (client BaseClient) GetProcesses(ctx context.Context, organization string) (result ListProcess, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetProcesses")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetProcessesPreparer(ctx, organization)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetProcesses", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetProcessesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetProcesses", resp, "Failure sending request")
		return
	}

	result, err = client.GetProcessesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetProcesses", resp, "Failure responding to request")
	}

	return
}

// GetProcessesPreparer prepares the GetProcesses request.
func (client BaseClient) GetProcessesPreparer(ctx context.Context, organization string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"organization": autorest.Encode("path", organization),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/process/processes", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetProcessesSender sends the GetProcesses request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetProcessesSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetProcessesResponder handles the response to the GetProcesses request. The method always
// closes the http.Response Body.
func (client BaseClient) GetProcessesResponder(resp *http.Response) (result ListProcess, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetProject get project with the specified id or name, optionally including capabilities.
// Parameters:
// organization - the name of the Azure DevOps organization.
// includeCapabilities - include capabilities (such as source control) in the team project result (default:
// false).
// includeHistory - search within renamed projects (that had such name in the past).
func (client BaseClient) GetProject(ctx context.Context, organization string, projectID string, includeCapabilities *bool, includeHistory *bool) (result TeamProject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetProject")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetProjectPreparer(ctx, organization, projectID, includeCapabilities, includeHistory)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetProject", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetProjectSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetProject", resp, "Failure sending request")
		return
	}

	result, err = client.GetProjectResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetProject", resp, "Failure responding to request")
	}

	return
}

// GetProjectPreparer prepares the GetProject request.
func (client BaseClient) GetProjectPreparer(ctx context.Context, organization string, projectID string, includeCapabilities *bool, includeHistory *bool) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"organization": autorest.Encode("path", organization),
		"projectId":    autorest.Encode("path", projectID),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if includeCapabilities != nil {
		queryParameters["includeCapabilities"] = autorest.Encode("query", *includeCapabilities)
	}
	if includeHistory != nil {
		queryParameters["includeHistory"] = autorest.Encode("query", *includeHistory)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/projects/{projectId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetProjectSender sends the GetProject request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetProjectSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetProjectResponder handles the response to the GetProject request. The method always
// closes the http.Response Body.
func (client BaseClient) GetProjectResponder(resp *http.Response) (result TeamProject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetProjectProperties get a collection of team project properties.
// Parameters:
// organization - the name of the Azure DevOps organization.
// projectID - the team project ID.
// keys - a comma-delimited string of team project property names. Wildcard characters ("?" and "*") are
// supported. If no key is specified, all properties will be returned.
func (client BaseClient) GetProjectProperties(ctx context.Context, organization string, projectID uuid.UUID, keys string) (result ListProjectProperty, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetProjectProperties")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetProjectPropertiesPreparer(ctx, organization, projectID, keys)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetProjectProperties", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetProjectPropertiesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetProjectProperties", resp, "Failure sending request")
		return
	}

	result, err = client.GetProjectPropertiesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetProjectProperties", resp, "Failure responding to request")
	}

	return
}

// GetProjectPropertiesPreparer prepares the GetProjectProperties request.
func (client BaseClient) GetProjectPropertiesPreparer(ctx context.Context, organization string, projectID uuid.UUID, keys string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"organization": autorest.Encode("path", organization),
		"projectId":    autorest.Encode("path", projectID),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(keys) > 0 {
		queryParameters["keys"] = autorest.Encode("query", keys)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/projects/{projectId}/properties", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetProjectPropertiesSender sends the GetProjectProperties request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetProjectPropertiesSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetProjectPropertiesResponder handles the response to the GetProjectProperties request. The method always
// closes the http.Response Body.
func (client BaseClient) GetProjectPropertiesResponder(resp *http.Response) (result ListProjectProperty, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetProjects get all projects in the organization that the authenticated user has access to.
// Parameters:
// organization - the name of the Azure DevOps organization.
// stateFilter - filter on team projects in a specific team project state (default: WellFormed).
func (client BaseClient) GetProjects(ctx context.Context, organization string, stateFilter ProjectState, top *int32, skip *int32, continuationToken string, getDefaultTeamImageURL *bool) (result ListTeamProjectReference, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetProjects")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetProjectsPreparer(ctx, organization, stateFilter, top, skip, continuationToken, getDefaultTeamImageURL)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetProjects", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetProjectsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetProjects", resp, "Failure sending request")
		return
	}

	result, err = client.GetProjectsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetProjects", resp, "Failure responding to request")
	}

	return
}

// GetProjectsPreparer prepares the GetProjects request.
func (client BaseClient) GetProjectsPreparer(ctx context.Context, organization string, stateFilter ProjectState, top *int32, skip *int32, continuationToken string, getDefaultTeamImageURL *bool) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"organization": autorest.Encode("path", organization),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(string(stateFilter)) > 0 {
		queryParameters["stateFilter"] = autorest.Encode("query", stateFilter)
	}
	if top != nil {
		queryParameters["$top"] = autorest.Encode("query", *top)
	}
	if skip != nil {
		queryParameters["$skip"] = autorest.Encode("query", *skip)
	}
	if len(continuationToken) > 0 {
		queryParameters["continuationToken"] = autorest.Encode("query", continuationToken)
	}
	if getDefaultTeamImageURL != nil {
		queryParameters["getDefaultTeamImageUrl"] = autorest.Encode("query", *getDefaultTeamImageURL)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/projects", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetProjectsSender sends the GetProjects request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetProjectsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetProjectsResponder handles the response to the GetProjects request. The method always
// closes the http.Response Body.
func (client BaseClient) GetProjectsResponder(resp *http.Response) (result ListTeamProjectReference, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetTeam get a specific team.
// Parameters:
// organization - the name of the Azure DevOps organization.
// projectID - the name or ID (GUID) of the team project containing the team.
// teamID - the name or ID (GUID) of the team.
func (client BaseClient) GetTeam(ctx context.Context, organization string, projectID string, teamID string) (result WebAPITeam, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetTeam")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetTeamPreparer(ctx, organization, projectID, teamID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetTeam", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetTeamSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetTeam", resp, "Failure sending request")
		return
	}

	result, err = client.GetTeamResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetTeam", resp, "Failure responding to request")
	}

	return
}

// GetTeamPreparer prepares the GetTeam request.
func (client BaseClient) GetTeamPreparer(ctx context.Context, organization string, projectID string, teamID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"organization": autorest.Encode("path", organization),
		"projectId":    autorest.Encode("path", projectID),
		"teamId":       autorest.Encode("path", teamID),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/projects/{projectId}/teams/{teamId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetTeamSender sends the GetTeam request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetTeamSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetTeamResponder handles the response to the GetTeam request. The method always
// closes the http.Response Body.
func (client BaseClient) GetTeamResponder(resp *http.Response) (result WebAPITeam, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetTeamMembersWithExtendedProperties get a list of members for a specific team.
// Parameters:
// organization - the name of the Azure DevOps organization.
// projectID - the name or ID (GUID) of the team project the team belongs to.
// teamID - the name or ID (GUID) of the team .
func (client BaseClient) GetTeamMembersWithExtendedProperties(ctx context.Context, organization string, projectID string, teamID string, top *int32, skip *int32) (result ListTeamMember, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetTeamMembersWithExtendedProperties")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetTeamMembersWithExtendedPropertiesPreparer(ctx, organization, projectID, teamID, top, skip)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetTeamMembersWithExtendedProperties", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetTeamMembersWithExtendedPropertiesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetTeamMembersWithExtendedProperties", resp, "Failure sending request")
		return
	}

	result, err = client.GetTeamMembersWithExtendedPropertiesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetTeamMembersWithExtendedProperties", resp, "Failure responding to request")
	}

	return
}

// GetTeamMembersWithExtendedPropertiesPreparer prepares the GetTeamMembersWithExtendedProperties request.
func (client BaseClient) GetTeamMembersWithExtendedPropertiesPreparer(ctx context.Context, organization string, projectID string, teamID string, top *int32, skip *int32) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"organization": autorest.Encode("path", organization),
		"projectId":    autorest.Encode("path", projectID),
		"teamId":       autorest.Encode("path", teamID),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if top != nil {
		queryParameters["$top"] = autorest.Encode("query", *top)
	}
	if skip != nil {
		queryParameters["$skip"] = autorest.Encode("query", *skip)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/projects/{projectId}/teams/{teamId}/members", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetTeamMembersWithExtendedPropertiesSender sends the GetTeamMembersWithExtendedProperties request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetTeamMembersWithExtendedPropertiesSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetTeamMembersWithExtendedPropertiesResponder handles the response to the GetTeamMembersWithExtendedProperties request. The method always
// closes the http.Response Body.
func (client BaseClient) GetTeamMembersWithExtendedPropertiesResponder(resp *http.Response) (result ListTeamMember, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetTeams get a list of teams.
// Parameters:
// organization - the name of the Azure DevOps organization.
// mine - if true return all the teams requesting user is member, otherwise return all the teams user has read
// access
// top - maximum number of teams to return.
// skip - number of teams to skip.
func (client BaseClient) GetTeams(ctx context.Context, organization string, projectID string, mine *bool, top *int32, skip *int32) (result ListWebAPITeam, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetTeams")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetTeamsPreparer(ctx, organization, projectID, mine, top, skip)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetTeams", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetTeamsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetTeams", resp, "Failure sending request")
		return
	}

	result, err = client.GetTeamsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "GetTeams", resp, "Failure responding to request")
	}

	return
}

// GetTeamsPreparer prepares the GetTeams request.
func (client BaseClient) GetTeamsPreparer(ctx context.Context, organization string, projectID string, mine *bool, top *int32, skip *int32) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"organization": autorest.Encode("path", organization),
		"projectId":    autorest.Encode("path", projectID),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if mine != nil {
		queryParameters["$mine"] = autorest.Encode("query", *mine)
	}
	if top != nil {
		queryParameters["$top"] = autorest.Encode("query", *top)
	}
	if skip != nil {
		queryParameters["$skip"] = autorest.Encode("query", *skip)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/projects/{projectId}/teams", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetTeamsSender sends the GetTeams request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetTeamsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetTeamsResponder handles the response to the GetTeams request. The method always
// closes the http.Response Body.
func (client BaseClient) GetTeamsResponder(resp *http.Response) (result ListWebAPITeam, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// QueueCreateProject queues a project to be created. Use the [GetOperation](../../operations/operations/get) to
// periodically check for create project status.
// Parameters:
// organization - the name of the Azure DevOps organization.
// body - the project to create.
func (client BaseClient) QueueCreateProject(ctx context.Context, organization string, body TeamProject) (result OperationReference, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.QueueCreateProject")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.QueueCreateProjectPreparer(ctx, organization, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "QueueCreateProject", nil, "Failure preparing request")
		return
	}

	resp, err := client.QueueCreateProjectSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "core.BaseClient", "QueueCreateProject", resp, "Failure sending request")
		return
	}

	result, err = client.QueueCreateProjectResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "QueueCreateProject", resp, "Failure responding to request")
	}

	return
}

// QueueCreateProjectPreparer prepares the QueueCreateProject request.
func (client BaseClient) QueueCreateProjectPreparer(ctx context.Context, organization string, body TeamProject) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"organization": autorest.Encode("path", organization),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/projects", pathParameters),
		autorest.WithJSON(body),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// QueueCreateProjectSender sends the QueueCreateProject request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) QueueCreateProjectSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// QueueCreateProjectResponder handles the response to the QueueCreateProject request. The method always
// closes the http.Response Body.
func (client BaseClient) QueueCreateProjectResponder(resp *http.Response) (result OperationReference, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusAccepted),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// QueueDeleteProject queues a project to be deleted. Use the [GetOperation](../../operations/operations/get) to
// periodically check for delete project status.
// Parameters:
// organization - the name of the Azure DevOps organization.
// projectID - the project id of the project to delete.
func (client BaseClient) QueueDeleteProject(ctx context.Context, organization string, projectID uuid.UUID) (result OperationReference, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.QueueDeleteProject")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.QueueDeleteProjectPreparer(ctx, organization, projectID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "QueueDeleteProject", nil, "Failure preparing request")
		return
	}

	resp, err := client.QueueDeleteProjectSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "core.BaseClient", "QueueDeleteProject", resp, "Failure sending request")
		return
	}

	result, err = client.QueueDeleteProjectResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "QueueDeleteProject", resp, "Failure responding to request")
	}

	return
}

// QueueDeleteProjectPreparer prepares the QueueDeleteProject request.
func (client BaseClient) QueueDeleteProjectPreparer(ctx context.Context, organization string, projectID uuid.UUID) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"organization": autorest.Encode("path", organization),
		"projectId":    autorest.Encode("path", projectID),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/projects/{projectId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// QueueDeleteProjectSender sends the QueueDeleteProject request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) QueueDeleteProjectSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// QueueDeleteProjectResponder handles the response to the QueueDeleteProject request. The method always
// closes the http.Response Body.
func (client BaseClient) QueueDeleteProjectResponder(resp *http.Response) (result OperationReference, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusAccepted),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// RemoveProjectAvatar removes the avatar for the project
// Parameters:
// organization - the name of the Azure DevOps organization.
// projectID - the id or name of the project
func (client BaseClient) RemoveProjectAvatar(ctx context.Context, organization string, projectID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.RemoveProjectAvatar")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.RemoveProjectAvatarPreparer(ctx, organization, projectID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "RemoveProjectAvatar", nil, "Failure preparing request")
		return
	}

	resp, err := client.RemoveProjectAvatarSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "core.BaseClient", "RemoveProjectAvatar", resp, "Failure sending request")
		return
	}

	result, err = client.RemoveProjectAvatarResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "RemoveProjectAvatar", resp, "Failure responding to request")
	}

	return
}

// RemoveProjectAvatarPreparer prepares the RemoveProjectAvatar request.
func (client BaseClient) RemoveProjectAvatarPreparer(ctx context.Context, organization string, projectID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"organization": autorest.Encode("path", organization),
		"projectId":    autorest.Encode("path", projectID),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/projects/{projectId}/avatar", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// RemoveProjectAvatarSender sends the RemoveProjectAvatar request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) RemoveProjectAvatarSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// RemoveProjectAvatarResponder handles the response to the RemoveProjectAvatar request. The method always
// closes the http.Response Body.
func (client BaseClient) RemoveProjectAvatarResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// SetProjectAvatar upload avatar for the project
// Parameters:
// organization - the name of the Azure DevOps organization.
// projectID - the id or name of the project
func (client BaseClient) SetProjectAvatar(ctx context.Context, organization string, body ProjectAvatar, projectID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.SetProjectAvatar")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.SetProjectAvatarPreparer(ctx, organization, body, projectID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "SetProjectAvatar", nil, "Failure preparing request")
		return
	}

	resp, err := client.SetProjectAvatarSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "core.BaseClient", "SetProjectAvatar", resp, "Failure sending request")
		return
	}

	result, err = client.SetProjectAvatarResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "SetProjectAvatar", resp, "Failure responding to request")
	}

	return
}

// SetProjectAvatarPreparer prepares the SetProjectAvatar request.
func (client BaseClient) SetProjectAvatarPreparer(ctx context.Context, organization string, body ProjectAvatar, projectID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"organization": autorest.Encode("path", organization),
		"projectId":    autorest.Encode("path", projectID),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/projects/{projectId}/avatar", pathParameters),
		autorest.WithJSON(body),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// SetProjectAvatarSender sends the SetProjectAvatar request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) SetProjectAvatarSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// SetProjectAvatarResponder handles the response to the SetProjectAvatar request. The method always
// closes the http.Response Body.
func (client BaseClient) SetProjectAvatarResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// SetProjectProperties create, update, and delete team project properties.
// Parameters:
// organization - the name of the Azure DevOps organization.
// projectID - the team project ID.
// body - a JSON Patch document that represents an array of property operations. See RFC 6902 for more details
// on JSON Patch. The accepted operation verbs are Add and Remove, where Add is used for both creating and
// updating properties. The path consists of a forward slash and a property name.
func (client BaseClient) SetProjectProperties(ctx context.Context, organization string, projectID uuid.UUID, body interface{}) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.SetProjectProperties")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.SetProjectPropertiesPreparer(ctx, organization, projectID, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "SetProjectProperties", nil, "Failure preparing request")
		return
	}

	resp, err := client.SetProjectPropertiesSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "core.BaseClient", "SetProjectProperties", resp, "Failure sending request")
		return
	}

	result, err = client.SetProjectPropertiesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "SetProjectProperties", resp, "Failure responding to request")
	}

	return
}

// SetProjectPropertiesPreparer prepares the SetProjectProperties request.
func (client BaseClient) SetProjectPropertiesPreparer(ctx context.Context, organization string, projectID uuid.UUID, body interface{}) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"organization": autorest.Encode("path", organization),
		"projectId":    autorest.Encode("path", projectID),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json-patch+json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/projects/{projectId}/properties", pathParameters),
		autorest.WithJSON(body),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// SetProjectPropertiesSender sends the SetProjectProperties request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) SetProjectPropertiesSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// SetProjectPropertiesResponder handles the response to the SetProjectProperties request. The method always
// closes the http.Response Body.
func (client BaseClient) SetProjectPropertiesResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// UpdateProject update an existing project's name, abbreviation, description, or restore a project.
// Parameters:
// organization - the name of the Azure DevOps organization.
// body - the updates for the project. The state must be set to wellFormed to restore the project.
// projectID - the project id of the project to update.
func (client BaseClient) UpdateProject(ctx context.Context, organization string, body TeamProject, projectID uuid.UUID) (result OperationReference, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.UpdateProject")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.UpdateProjectPreparer(ctx, organization, body, projectID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "UpdateProject", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdateProjectSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "core.BaseClient", "UpdateProject", resp, "Failure sending request")
		return
	}

	result, err = client.UpdateProjectResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "UpdateProject", resp, "Failure responding to request")
	}

	return
}

// UpdateProjectPreparer prepares the UpdateProject request.
func (client BaseClient) UpdateProjectPreparer(ctx context.Context, organization string, body TeamProject, projectID uuid.UUID) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"organization": autorest.Encode("path", organization),
		"projectId":    autorest.Encode("path", projectID),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/projects/{projectId}", pathParameters),
		autorest.WithJSON(body),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateProjectSender sends the UpdateProject request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) UpdateProjectSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// UpdateProjectResponder handles the response to the UpdateProject request. The method always
// closes the http.Response Body.
func (client BaseClient) UpdateProjectResponder(resp *http.Response) (result OperationReference, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusAccepted),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// UpdateTeam update a team's name and/or description.
// Parameters:
// organization - the name of the Azure DevOps organization.
// projectID - the name or ID (GUID) of the team project containing the team to update.
// teamID - the name of ID of the team to update.
func (client BaseClient) UpdateTeam(ctx context.Context, organization string, body WebAPITeam, projectID string, teamID string) (result WebAPITeam, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.UpdateTeam")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.UpdateTeamPreparer(ctx, organization, body, projectID, teamID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "UpdateTeam", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdateTeamSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "core.BaseClient", "UpdateTeam", resp, "Failure sending request")
		return
	}

	result, err = client.UpdateTeamResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "core.BaseClient", "UpdateTeam", resp, "Failure responding to request")
	}

	return
}

// UpdateTeamPreparer prepares the UpdateTeam request.
func (client BaseClient) UpdateTeamPreparer(ctx context.Context, organization string, body WebAPITeam, projectID string, teamID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"organization": autorest.Encode("path", organization),
		"projectId":    autorest.Encode("path", projectID),
		"teamId":       autorest.Encode("path", teamID),
	}

	const APIVersion = "5.1-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{organization}/_apis/projects/{projectId}/teams/{teamId}", pathParameters),
		autorest.WithJSON(body),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateTeamSender sends the UpdateTeam request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) UpdateTeamSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// UpdateTeamResponder handles the response to the UpdateTeam request. The method always
// closes the http.Response Body.
func (client BaseClient) UpdateTeamResponder(resp *http.Response) (result WebAPITeam, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
